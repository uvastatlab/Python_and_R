<<<<<<< HEAD
[["data-manipulation.html", "Chapter 4 Data Manipulation 4.1 Create strings from numbers 4.2 Create numbers from strings 4.3 Change case", " Chapter 4 Data Manipulation This chapter looks at various strategies for modifying and deriving variables in data. 4.1 Create strings from numbers You may have data that is numeric but that needs to be treated as a string. For example, census data often codes age ranges as groups. For example: 1 = 0-6 2 = 7-12 3 = 13-17 And so on. These numbers represent groups, not a count or measure of anything. Python R The as.character() function takes a vector and converts it to string format. &gt; # create a vector of numbers &gt; x &lt;- c(2, 2, 3, 4, 2, 4) &gt; x [1] 2 2 3 4 2 4 &gt; # convert to string &gt; x &lt;- as.character(x) &gt; x [1] &quot;2&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;2&quot; &quot;4&quot; 4.2 Create numbers from strings Python R 4.3 Change case Python R "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
=======
[["index.html", "Python and R Welcome", " Python and R Clay Ford 2021-09-27 Welcome This book provides parallel examples in Python and R to help users of one platform more easily transition to the other. "],["basics.html", "Chapter 1 Basics 1.1 Math 1.2 Assignment 1.3 Printing a value 1.4 Packages and Libraries 1.5 Generating a sequence of values 1.6 Calculating means and medians", " Chapter 1 Basics This chapter covers the very basics of Python and R. 1.1 Math Mathematical operators are the same except for exponents, integer division, and remainder division (modulo). Python Python uses ** for exponentiation, // for integer division, and % for remainder division. &gt; 3**2 9 &gt; 5 // 2 2 &gt; 5 % 2 1 In Python, the + operator can also be used to combine strings. See this TBD section. R Python uses ^ for exponentiation, %/% for integer division, and %% for remainder division. &gt; 3^2 [1] 9 &gt; 5 %/% 2 [1] 2 &gt; 5 %% 2 [1] 1 1.2 Assignment Python uses = for assignment while R can use either = or &lt;- for assignment. The latter “assignment arrow” is preferred in most R style guides to distinguish it between assignment and setting the value of a function argument. According to R’s documentation, “The operator &lt;- can be used anywhere, whereas the operator = is only allowed at the top level (e.g., in the complete expression typed at the command prompt) or as one of the subexpressions in a braced list of expressions.” See ?assignOps. Python &gt; x = 12 R &gt; x &lt;- 12 1.3 Printing a value To see the value of an object created via assignment, you can simply enter the object at the console and hit enter for both Python and R, though it is common in Python to explicitly use the print() function. Python &gt; x 12 R &gt; x [1] 12 1.4 Packages and Libraries User-created functions can be bundled and distributed as libraries (Python) and packages (R). Libraries and packages need to be installed only once. Thereafter they’re “imported” (Python) or “loaded” (R) in each new session when needed. Libraries and packages with large user bases are often updated to add functionality and fix bugs. The updates are not automatically installed. Staying apprised of library/package updates can be challenging. Some suggestions are following developers on Twitter, signing up for newsletters, or periodically checking to see what updates are available. Libraries and packages often depend on other libraries and packages. These are known as “dependencies.” Sometimes libraries/packages are updated to accommodate changes to other libraries/packages they depend on. Python R The main repository for R packages is the Comprehensive R Archive Network (CRAN). Another repository is Bioconductor, which provides tools for working with genomic data. Many packages are also distributed on GitHub. To install packages from CRAN use the install.packages() function. In RStudio, you can also go to Tools…Install Packages… for a dialog that will auto-complete package names as you type. &gt; # install the vcd package, a package for Visualizing Categorical Data &gt; install.packages(&quot;vcd&quot;) &gt; &gt; # load the package &gt; library(vcd) &gt; &gt; # see which packages on your computer have updates available &gt; old.packages() &gt; &gt; # download and install available package updates; &gt; # set ask = TRUE to verify installation of each package &gt; update.packages(ask = FALSE) To install R packages from GitHub use the install_github() function from the devtools package. You need to include the username of the repo owner followed by a forward slash and the name of the package. Typing two colons between a package and a function in the package allows you to use that function without loading the package. &gt; install.packages(&quot;devtools&quot;) &gt; devtools::install_github(&quot;username/packagename&quot;) Occasionally when installing or updating a package you will be asked “Do you want to install from sources the package which needs compilation?” R packages on CRAN are compiled for Mac and Windows operating systems. That can take a day or two. If you try to install a package that has not been compiled then you’ll get asked if you want to compile it yourself. You can usually just answer No. If you answer Yes, R will try to compile the package on your computer. This will only work if you have the required build tools on your computer. For Windows this means having RTools installed. Mac users typically already have the necessary build tools. 1.5 Generating a sequence of values There are multiple ways in both Python and R to generate sequences of values. In Python, one option is arange() from numpy. In R, a common approach is to use seq(). The sequences can be incremented by indicating a step argument in arange() or a by argument in seq(). Be aware that the start/stop interval in arange() is open, but the from/to interval in seq() is closed. Python &gt; import numpy as np + x = np.arange(start = 1, stop = 11, step = 2) + x array([1, 3, 5, 7, 9]) R &gt; x &lt;- seq(from = 1, to = 11, by = 2) &gt; x [1] 1 3 5 7 9 11 1.6 Calculating means and medians The NumPy Python library has functions for calculating means and medians, and base R has functions for doing the same. Python &gt; # Mean, using function from NumPy library + import numpy as np + x = [90, 105, 110] + x_avg = np.mean(x) + print(x_avg) + + # Median, using function from NumPy library 101.66666666666667 &gt; x = [98, 102, 20, 22, 304] + x_med = np.median(x) + print(x_med) 98.0 R &gt; # Mean, using function from base R &gt; x &lt;- c(90, 105, 110) &gt; x_avg &lt;- mean(x) &gt; x_avg [1] 101.6667 &gt; # Median, using function from base R &gt; x &lt;- c(98, 102, 20, 22, 304) &gt; x_med &lt;- median(x) &gt; x_med [1] 98 "],["data-structures.html", "Chapter 2 Data Structures 2.1 Vectors", " Chapter 2 Data Structures This chapter compares and contrasts data structures in Python and R. 2.1 Vectors Python R "],["importing-data.html", "Chapter 3 Importing Data 3.1 CSV 3.2 XLS/XLSX (Excel) 3.3 Text 3.4 JSON 3.5 XML", " Chapter 3 Importing Data This chapter reviews importing external data into Python and R, including CSV, txt, and other structured data files. 3.1 CSV Comma separated value (CSV) files are text files with fields separated by commas. They are useful for “rectangular” data where rows represent observations and columns represent variables or features. Python &gt; import pandas + d = pandas.read_csv(&#39;data/dat.csv&#39;) R There are many ways to import a csv file. A common way is to use the base R function read.csv(). &gt; d &lt;- read.csv(&quot;data/dat.csv&quot;) Two packages that provide alternatives to read.csv() are readr and data.table. The readr function read_csv() returns a tibble. The data.table function fread() returns a data.table. &gt; library(readr) &gt; d &lt;- read_csv(&quot;data/dat.csv&quot;) &gt; &gt; library(data.table) &gt; d &lt;- fread(&quot;data/dat.csv&quot;) 3.2 XLS/XLSX (Excel) Python R 3.3 Text Python R 3.4 JSON Python R 3.5 XML Python R "],["data-manipulation.html", "Chapter 4 Data Manipulation 4.1 Create strings from numbers 4.2 Create numbers from strings 4.3 Change case", " Chapter 4 Data Manipulation This chapter looks at various strategies for modifying and deriving variables in data. 4.1 Create strings from numbers Python R 4.2 Create numbers from strings Python R 4.3 Change case Python R "],["combine-reshape-and-merge.html", "Chapter 5 Combine, Reshape and Merge 5.1 Combine rows 5.2 Combine columns 5.3 Reshape wide to long 5.4 Reshape long to wide 5.5 Merge/Join", " Chapter 5 Combine, Reshape and Merge This chapter looks at various strategies for combining, reshaping and merging data. 5.1 Combine rows Python R 5.2 Combine columns Python R 5.3 Reshape wide to long Python R 5.4 Reshape long to wide Python R 5.5 Merge/Join 5.5.1 Left Join Python R 5.5.2 Right Join Python R 5.5.3 Inner Join Python R 5.5.4 Outer Join Python R "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
>>>>>>> 4accc23a8d91e9462ce93a2ed3e9f6735204c3b4
